
import os
import json
import pandas as pd
import streamlit as st
from datetime import datetime

# ---------- Settings ----------
st.set_page_config(page_title="AI SOC-assistent (demo)", page_icon="üõ°Ô∏è", layout="wide")

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
use_llm = bool(OPENAI_API_KEY)

# ---------- Small helpers ----------
@st.cache_data
def load_incidents():
    return pd.read_csv("data/incidents.csv")

@st.cache_data
def load_kb():
    with open("kb.json") as f:
        return json.load(f)

def simulated_llm(prompt: str) -> str:
    # Very naive, template-based "AI". Just enough for a demo if no API key.
    if "PowerShell" in prompt or "powershell" in prompt:
        return (
            "Sammanfattning: Misst√§nkt PowerShell-process startad av Office-dokument. "
            "H√∂g risk f√∂r makro-baserad nedladdning.\n\n"
            "Rekommenderade steg:\n"
            "1) Isolera klienten.\n2) H√§mta artefakter (processer, n√§tverk)."
            "\n3) K√∂r IOC-s√∂kning i milj√∂n.\n4) Blockera indikatorer i EDR/SOAR.\n"
            "5) Informera anv√§ndare och SOC Manager.\n"
        )
    if "phishing" in prompt.lower():
        return (
            "Bed√∂mning: Sannolik phishing med lookalike-dom√§n och makro-bilaga.\n"
            "√Ötg√§rder: 1) Karant√§n e-post, 2) Sandboxa bilaga, 3) Informera drabbad anv√§ndare, "
            "4) S√∂k efter liknande mail, 5) Uppdatera regler f√∂r lookalikes.\n"
        )
    if "SIEM" in prompt or "query" in prompt.lower():
        return "Exempel-SIEM-fr√•ga: index=auth user=svc_admin | transaction user maxspan=10m | where failed>=5 AND success=1"
    if "stakeholder" in prompt.lower() or "intressent" in prompt.lower():
        return (
            "√Ñmne: L√§gesrapport incident\n\nHej,\nVi hanterar en misst√§nkt h√§ndelse p√• LAPTOP-23F. "
            "Klienten √§r isolerad och IOC-s√∂kning p√•g√•r. N√§sta uppdatering om 60 min.\n\nMvh,\nSOC"
        )
    # generic fallback
    return (
        "Sammanfattning: Det h√§r √§r ett simulerat LLM-svar baserat p√• din prompt.\n"
        "F√∂reslagna n√§sta steg: f√∂lj relevant playbook, dokumentera i √§rendet, och kommunicera till intressenter."
    )

def call_llm(prompt: str) -> str:
    if not use_llm:
        return simulated_llm(prompt)
    try:
        # Lazy import to avoid dependency if not used
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Du √§r en kortfattad, handlingsinriktad SOC-analytiker. Svara p√• svenska."},
                {"role": "user", "content": prompt},
            ],
            temperature=0.2,
        )
        return resp.choices[0].message.content
    except Exception as e:
        return f"(LLM-fel, v√§xlar till simulerat l√§ge)\n\n{simulated_llm(prompt)}"

# ---------- UI ----------
st.title("üõ°Ô∏è AI SOC-assistent ‚Äì demo")
st.caption("F√∂renklad agent som hj√§lper till med triage, phishing och policyfr√•gor.")

tab1, tab2, tab3 = st.tabs(["Incidenttriage", "Phishing-analys", "Policy/Playbook Q&A"])

kb = load_kb()

with tab1:
    st.subheader("Incidenttriage")
    df = load_incidents()
    st.dataframe(df, use_container_width=True, hide_index=True)
    selected = st.selectbox("V√§lj incident", df["id"].tolist())
    row = df[df["id"] == selected].iloc[0]
    st.markdown(f"**{row['title']}**  \nK√§lla: {row['source']} ‚Ä¢ Prioritet: {row['severity']} ‚Ä¢ Tid: {row['event_time']}  \nTillg√•ngar: {row['assets']}")
    st.text_area("Incidentanteckningar", row["notes"], height=120, key="notes_t1")

    colA, colB, colC = st.columns(3)
    with colA:
        if st.button("üß† Sammanfatta incident"):
            prompt = f"Sammanfatta kort incidenten och risken:\n{row.to_dict()}"
            st.write(call_llm(prompt))
    with colB:
        if st.button("üìù F√∂resl√• √•tg√§rdsplan"):
            # Pick playbook by keyword
            pb_key = "edr_powershell" if "PowerShell" in row["title"] else \
                     "phishing_attachment" if "phishing" in row["title"].lower() else \
                     "after_hours_admin_login"
            steps = kb["playbooks"].get(pb_key, [])
            prompt = f"F√∂resl√• en konkret √•tg√§rdsplan (punktlista) baserat p√• playbook-steg: {steps}\nIncident: {row.to_dict()}"
            st.write(call_llm(prompt))
    with colC:
        if st.button("üìß Skapa stakeholder-mail"):
            contact = kb["contacts"]["SOC_manager"]
            prompt = f"Skriv ett kort statusmail p√• svenska till {contact} om incident {row['id']} med tydliga next steps."
            st.write(call_llm(prompt))

    st.divider()
    st.subheader("Hj√§lp f√∂r jakt/queries")
    if st.button("üîé Ge exempel p√• SIEM-fr√•ga"):
        q = kb["queries"]["siem_failed_then_success"]
        prompt = f"F√∂resl√• eller f√∂rb√§ttra SIEM-fr√•ga f√∂r att hitta liknande h√§ndelser. Exempel: {q}"
        st.code(call_llm(prompt))

with tab2:
    st.subheader("Phishing-analys")
    sender = st.text_input("Avs√§ndare", "Accounts Payable <ap@inv0ice-co.com>")
    subject = st.text_input("√Ñmne", "Invoice 2025-09")
    indicators = st.text_area("Indikatorer (dom√§n, bilagor, l√§nkar, spr√•kbruk)", "Lookalike-dom√§n, makro-bilaga DOCM, br√•dska i spr√•ket")
    user = st.text_input("Drabbad anv√§ndare", "bob@example.com")

    if st.button("üß† Bed√∂m & f√∂resl√• √•tg√§rder"):
        prompt = f"Bed√∂m phishingrisk och f√∂resl√• √•tg√§rder enligt playbook 'phishing_attachment'. Indata: {sender}, {subject}, {indicators}, user={user}"
        st.write(call_llm(prompt))

with tab3:
    st.subheader("Policy/Playbook Q&A")
    question = st.text_area("St√§ll en fr√•ga (ex: 'Vad g√∂r vi vid admininloggningar nattetid?')", height=120)
    if st.button("üîç Svara baserat p√• playbooks & KB"):
        # Simple retrieval from kb.playbooks
        context = json.dumps(kb, ensure_ascii=False)
        prompt = f"Besvara p√• svenska, kortfattat. Anv√§nd endast f√∂ljande kunskapsbas: {context}\n\nFr√•ga: {question}"
        st.write(call_llm(prompt))

st.caption(("‚úÖ LLM-aktivt (OpenAI)" if use_llm else "üü° Simulerat l√§ge (ingen API-nyckel)")
           + " ‚Ä¢ Denna demo √§r f√∂renklad och avsedd f√∂r visning.")
